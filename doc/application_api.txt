Author: Hang Qu<quhang@stanford.edu>

This document presents the API exposed to Chubby users.

1. The data structure of the Chubby file systems.

The Chubby file system exports a file system interface similar to, but
simpler than that of UNIX. It consists of a strict tree of files and
directories, as in UNIX. Both files and directories are called nodes.

Each node has the following meta-data, which is stored persistently:
(A) an instance number; greater than the instance number of any previous
node with the same name.
(B) a content generation number (files only); this increases when the
file's contents are written.
(C) a lock generation number; this increases when the node's lock
transitions from free to held.
(D) a 64-bit checksum of the file content.

#include <cstdint>
struct MetaData {
  uint64_t instance_number;
  uint64_t content_generation_number;
  uint64_t lock_generation_number;
  uint64_t file_content_checksum;
  bool is_directory;
};

The content of a file node is a byte string, less than say 4KB.

const size_t MAX_FILE_SIZE = 4096;
typedef std::string FileContent;

The content of a directory node is a list of filenames. Users should
change the directory content through directory APIs, although operating
on it content directly is allowed.

typedef std::vector<std::string> DirectoryContent;

A translation function between DirectoryContent and FileContent should be
given in API.

2. API for Chubby users.

2.1. File handlers.

A file handler is bound to a specific instance number of a file. A
Chubby user has to provide a file handler when accessing or editing
a file.

A file handler can become invalid without the user explicitly closing
it, when either the master fails over or the file is explicitly deleted
by other Chubby users.

struct FileHandler {
  uint64_t magic_number;  // To avoid faking file handlers.
  uint64_t master_sequence_number;
  std::string file_name;
  uint64_t instance_number;
  bool write_is_allowed;
};

A file handler identifier is an uint64_t on the user side that maps to a
file handler. File identifiers need not to be consistent across different
users.

typedef uint64_t FileHandlerId;

2.2. File system operations.

const FileHandlerId FAIL = 0;

uint64_t mode_t;
const uint64_t READ = 0x1;
const uint64_t WRITE = 0x2;
const uint64_t CREATE_DIRECTORY = 0x4;
const uint64_t CREATE_FILE = 0x8;

// Opens or creates a node and returns its file handler identifier.
// If CREATE_DIRECTORY or CREATE_FILE flag is set, it creates a node,
// and returns FAIL if the node already exists.
// If neither CREATE_DIRECTORY or CREATE_FILE flag is set, it opens a node,
// and return FAIL if the node does not exists.
// If both CREATE_DIRECTORY and CREATE_FILE flags are set, throw exception.
FileHandlerId open(const std::string& file_name, mode_t mode);

// Closes the file handler identifier, and further calls using the file
// handler identifier will fail. Always succeeds.
void close(FileHandlerId file_handler_id);

// Deletes a node if it has no children, returns false if the node does not
// exist or cannot not be deleted because it has children. Throws exception
// otherwise.
// Further access of the same instance number of the file by any
// Chubby users will be denied.
bool delete(const std::string& file_name);

// Retrieves the file content and the meta-data of a file, returns true.
// Throws exception otherwise.
bool getContentsAndStat(const FileHandlerId file_handler_id,
    FileContent* file_content,
    MetaData* meta_data);

// Sets the file content of a file, returns true.
// Throws exception otherwise.
bool setContents(const FileHandlerId file_handler_id,
    const FileContent& file_content);

2.3. Lock operations.

Calling lock primitives requires write access to the file.

// Tries to acquire the lock corresponding to the file handler identifier,
// and blocks until the lock is acquired.
void acquire(const FileHandlerId file_handler_id);

// Unblocking version of "acquire". Returns true if the lock is acquired.
bool tryAcquire(const FileHandlerId file_handler_id);

// Releases the lock corresponding to the file handler identifier.
void release(const FileHandlerId file_handler_id);

2.4. Exceptions.

Exceptions are thrown during a function call when the session breaks, the
file handler identifier is illegal, access control disallows the operation,
the file name is in illegal format, or the file is opened twice. More
failure cases to be added.

If the function call successfully reaches the master, and its semantics is
well defined, the function call should not throw exception but returns a
failure instead.

2.5. To do.

Event and sequencer are not added to the API yet.
